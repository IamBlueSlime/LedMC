package fr.blueslime.ledmc;

import fr.blueslime.ledmc.peripheral.EnumKeyboardLayout;
import fr.blueslime.ledmc.peripheral.EnumKeyboardProvider;
import net.minecraftforge.common.config.ConfigCategory;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.common.config.Property;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class GuiConfiguration extends JDialog {
    private static final String TITLE = "LedMC - Configuration";

    private final Configuration configuration;

    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JComboBox<String> keyboardProvider;
    private JComboBox<String> keyboardLayout;
    private JRadioButton noRGBKeyboard;
    private JRadioButton haveRGBKeyboard;

    GuiConfiguration(Configuration configuration) {
        this.configuration = configuration;

        this.setContentPane(this.contentPane);
        this.setModal(true);
        this.setAlwaysOnTop(true);
        this.setTitle(TITLE);
        this.getRootPane().setDefaultButton(this.buttonOK);

        this.buttonOK.addActionListener(event -> this.onOK());
        this.buttonCancel.addActionListener(event -> this.onCancel());

        // call onCancel() when cross is clicked
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent event) {
                GuiConfiguration.this.onCancel();
            }
        });

        ButtonGroup rgbGroup = new ButtonGroup();
        rgbGroup.add(this.noRGBKeyboard);
        rgbGroup.add(this.haveRGBKeyboard);

        this.noRGBKeyboard.addActionListener(event ->
        {
            this.keyboardProvider.setEnabled(false);
            this.keyboardLayout.setEnabled(false);
        });

        this.haveRGBKeyboard.addActionListener(event ->
        {
            this.keyboardProvider.setEnabled(true);
            this.keyboardLayout.setEnabled(true);
        });

        this.keyboardProvider.setEnabled(false);
        this.keyboardLayout.setEnabled(false);

        // call onCancel() on ESCAPE
        this.contentPane.registerKeyboardAction(event -> this.onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        for (EnumKeyboardProvider keyboardProviderInEnum : EnumKeyboardProvider.values())
            if (keyboardProviderInEnum != EnumKeyboardProvider.NONE)
                this.keyboardProvider.addItem(keyboardProviderInEnum.getName());

        for (EnumKeyboardLayout keyboardLayoutInEnum : EnumKeyboardLayout.values())
            this.keyboardLayout.addItem(keyboardLayoutInEnum.getName());
    }

    private void onOK() {
        if (this.noRGBKeyboard.isSelected()) {
            this.configuration.get("general", "keyboard_provider", EnumKeyboardProvider.NONE.getName());
        } else {
            this.configuration.get("general", "keyboard_provider", (String) this.keyboardProvider.getSelectedItem());
            this.configuration.get("general", "keyboard_layout", (String) this.keyboardLayout.getSelectedItem());
        }

        this.dispose();
    }

    private void onCancel() {
        int selectedOption = JOptionPane.showConfirmDialog(this, "If you cancel this configuration, the mod will be disabled. Are you sure?", TITLE, JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);

        if (selectedOption == JOptionPane.OK_OPTION)
            this.dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        contentPane.setName("LedMC - Configuration");
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.jgoodies.forms.layout.FormLayout("fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        contentPane.add(panel1, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        label1.setText("Please fill the information correctly if you want a correct display.");
        com.jgoodies.forms.layout.CellConstraints cc = new com.jgoodies.forms.layout.CellConstraints();
        panel1.add(label1, cc.xy(1, 1));
        final JLabel label2 = new JLabel();
        label2.setText("Select your keyboard brand:");
        panel1.add(label2, cc.xy(1, 9));
        keyboardProvider = new JComboBox();
        panel1.add(keyboardProvider, cc.xyw(1, 11, 2));
        final JLabel label3 = new JLabel();
        label3.setText("Select your keyboard layout:");
        panel1.add(label3, cc.xy(1, 15));
        keyboardLayout = new JComboBox();
        panel1.add(keyboardLayout, cc.xyw(1, 17, 2));
        noRGBKeyboard = new JRadioButton();
        noRGBKeyboard.setSelected(true);
        noRGBKeyboard.setText("I don't have a compatible RGB keyboard.");
        panel1.add(noRGBKeyboard, cc.xy(1, 3));
        haveRGBKeyboard = new JRadioButton();
        haveRGBKeyboard.setText("I have a compatible RGB keyboard.");
        panel1.add(haveRGBKeyboard, cc.xy(1, 5));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        contentPane.add(panel2, BorderLayout.CENTER);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel2.add(panel3);
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel3.add(buttonOK);
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel3.add(buttonCancel);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
